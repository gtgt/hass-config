substitutions:
  name: esp32-2432s028
  hostname: esp32-2432s028

esp32:
  board: esp32dev
  framework:
    type: arduino

packages:
  common: !include _includes/common.yaml
#  fonts: !include _includes/fonts3.yaml
#  color: !include _includes/color.yaml

globals:
  - id: brightness
    type: int
    restore_value: true
    initial_value: '100'

spi:
  - id: lcd_spi
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch_spi
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

i2c:
  sda: GPIO27
  scl: GPIO22
  scan: true
  id: i2c_bus

display:
  - platform: ili9xxx
    model: ILI9341
    id: lcd_display
    spi_id: lcd_spi
    cs_pin: 15
    dc_pin: 2
    auto_clear_enabled: false
    invert_colors: false
    dimensions:
        width: 240
        height: 320

    #rotation: 180
    transform:
        swap_xy: true
        mirror_x: false
        mirror_y: false
#    lambda: |-
#      auto touch = id(touch_screen)->get_touch();
#      if (touch) // or touch.has_value()
#        it.filled_circle(touch.value().x, touch.value().y, 10, RED);

touchscreen:
  platform: xpt2046
  id: touch_screen
  spi_id: touch_spi
  cs_pin: 33
  interrupt_pin: 36
  #update_interval: 50ms
  #report_interval: 1s
  threshold: 400
  calibration:
    x_min: 265
    x_max: 3800
    y_min: 280
    y_max: 3620
  transform:
    swap_xy: false
    mirror_x: false
    mirror_y: true
  on_touch:
    then:
      - lvgl.label.update:
          id: text_title
          text:
            format: "x=%d, y=%d\nxr=%d,yr=%d"
            args: [ touch.x, touch.y, touch.x_raw, touch.y_raw ]
  on_release:
    then:
      - if:
          condition: lvgl.is_paused
          then:
            - light.turn_on: backlight
            - lvgl.resume:
            - lvgl.widget.redraw:

binary_sensor:
  - platform: touchscreen
    name: ${name}_power
    x_min: 30
    x_max: 90
    y_min: 20
    y_max: 80

  - platform: touchscreen
    name: ${name}_music
    x_min: 150
    x_max: 210
    y_min: 20
    y_max: 80

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: ${name}_button0
    id: button0

# Define pins for backlight display and back LED1
output:
  - platform: ledc
    pin: GPIO21
    id: output_backlight
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true

api:
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.show: lbl_hastatus
  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.widget.hide: lbl_hastatus

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    name: ${name}_backlight
    id: backlight
    internal: true
    output: output_backlight
    restore_mode: ALWAYS_ON
  - platform: rgb
    id: led
    internal: true
    red: output_red
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF

number:
  - platform: lvgl
    widget: slider_brightness
    id: screen_brightness
    internal: true
    on_value:
      - globals.set:
          id: brightness
          value: !lambda return x;
      - light.turn_on:
          id: backlight
          brightness: !lambda |-
            // output value must be in range 0 - 1.0
            // id(backlight).turn_on().set_brightness(x / 100.0).perform()
            return x / 100.0;

sensor:
  # - platform: uptime
  #   internal: true
  #   id: uptime_sensor
  #   update_interval: 1s
  #   on_raw_value:
  #     then:
  #       - text_sensor.template.publish:
  #           id: uptime_human
  #           state: !lambda |-
  #             int seconds = round(id(uptime_sensor).raw_state);
  #             int days = seconds / (24 * 3600);
  #             seconds = seconds % (24 * 3600);
  #             int hours = seconds / 3600;
  #             seconds = seconds % 3600;
  #             int minutes = seconds /  60;
  #             seconds = seconds % 60;
  #             return (
  #               ("Uptime ") +
  #               (days ? to_string(days) + "d " : "") +
  #               (hours ? to_string(hours) + "h " : "") +
  #               (minutes ? to_string(minutes) + "m " : "") +
  #               (to_string(seconds) + "s")
  #             ).c_str();
  - platform: homeassistant
    id: light_l_office_led0_brightness
    entity_id: light.l_office_led0
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: dimmer_l_office_led0
          value: !lambda return x;
  - platform: homeassistant
    id: light_magichome_rgb_brightness
    entity_id: light.magichome_rgb
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: dimmer_magichome_rgb
          value: !lambda return x;

  - platform: homeassistant
    id: c_cur_temp
    entity_id: climate.c_office_ac
    attribute: current_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: lbl_climate_cur_temp
            text:
              format: "%.0f C"
              args: [x]
  - platform: homeassistant
    id: c_target_temp
    entity_id: climate.c_office_ac
    attribute: temperature
    on_value:
      then:
        - lvgl.arc.update:
            id: arc_climate
            value: !lambda return x;
        - lvgl.spinbox.update:
            id: spinbox_climate
            value: !lambda return x;
        - lvgl.label.update:
            id: lbl_climate_target_temp
            text:
              format: "%.0f C"
              args: [x]

text_sensor:
  # - platform: template
  #   id: uptime_human
  #   icon: mdi:clock-start
  #   internal: true

  - platform: wifi_info
    ip_address:
      id: ip_address
      internal: true
      on_value:
        - lvgl.label.update:
            id: text_title
            text:
              format: "IP: %s"
              args: [ x.c_str() ]

  - platform: homeassistant
    id: light_magichome_rgb_color
    entity_id: light.magichome_rgb
    attribute: rgb_color

  - platform: homeassistant
    id: c_mode
    entity_id: climate.c_office_ac
    on_value:
      then:
        - lvgl.dropdown.update:
            id: dd_mode_climate
            selected_index: !lambda |-
              if (x == "cool") { return 1; }
              else if (x == "heat") { return 2; }
              else if (x == "fan_only") { return 3; }
              else if (x == "dry") { return 4; }
              return 0;

  - platform: homeassistant
    id: c_fan
    entity_id: climate.c_office_ac
    attribute: fan_mode
    on_value:
      then:
        - lvgl.dropdown.update:
            id: dd_fan_climate
            selected_index: !lambda |-
              if (x == "low") { return 1; }
              else if (x == "medium") { return 2; }
              else if (x == "high") { return 3; }
              return 0;

# Exposed switches.
switch:
  - platform: homeassistant
    id: l_office_led0
    entity_id: light.l_office_led0
    on_turn_on:
      - lvgl.widget.update:
          id: btn_l_office_led0
          state:
            checked: true
      - lvgl.label.update:
          id: btn_l_office_led0_label
          text: "\U0000e0f0"
      - lvgl.slider.update:
          id: dimmer_l_office_led0
          hidden: false
    on_turn_off:
      - lvgl.widget.update:
          id: btn_l_office_led0
          state:
            checked: false
      - lvgl.label.update:
          id: btn_l_office_led0_label
          text: "\U0000e9b8"
      - lvgl.slider.update:
          id: dimmer_l_office_led0
          hidden: true
  - platform: homeassistant
    id: magichome_rgb
    entity_id: light.magichome_rgb
    on_turn_on:
      - lvgl.widget.update:
          id: btn_magichome_rgb
          state:
            checked: true
      - lvgl.label.update:
          id: btn_magichome_rgb_label
          text: "\U0000f7ed"
      - lvgl.slider.update:
          id: dimmer_magichome_rgb
          hidden: false
    on_turn_off:
      - lvgl.widget.update:
          id: btn_magichome_rgb
          state:
            checked: false
      - lvgl.label.update:
          id: btn_magichome_rgb_label
          text: "\U0000f4ef"
      - lvgl.slider.update:
          id: dimmer_magichome_rgb
          hidden: true
  - platform: restart
    name: ${name} Restart

# https://fonts.google.com/icons?icon.size=24
font:
  - file: "gfonts://Material+Symbols+Outlined"
    id: icons_24
    size: 24
    glyphs: [
        "\U0000f8b5", # air-conditioner
        "\U0000e0f0", # bulb
        "\U0000e9b8", # bulb off
        "\U0000f7ed", # backlight-high
        "\U0000f4ef", # backlight-high-off
        "\U0000e8b8"  # cog
    ]

lvgl:
  displays:
    - lcd_display
  touchscreens:
    - touch_screen
  buffer_size: 20%
  log_level: WARN
  on_idle:
    timeout: 300s
    then:
      - logger.log: "LVGL is idle"
      - lvgl.pause:
      - light.turn_off:
          id: backlight
          transition_length: 5s
  disp_bg_color: 0x000000
  default_font: montserrat_14
  style_definitions:
    - id: black_style
      text_color: 0xFFFFFF
      bg_color: 0x111111
      bg_grad_color: 0xFFFFFF
      border_color: 0x333333
      outline_color: 0xFFFFFF
      shadow_color: 0xFFFFFF
      bg_opa: TRANSP
  styles: black_style
  theme:
    obj:
      styles: black_style
    label:
      styles: black_style
    tabview:
      styles: black_style
    button:
      bg_color: 0x111111
      #bg_grad_color: 0x111111
      #bg_grad_dir: VER
      bg_opa: 85%
      border_color: 0x333333
      border_width: 0
      text_color: 0xFFFFFF
      pressed: # set some btn colors to be different in pressed state
        bg_color: 0x333333
        bg_grad_color: 0x333333
        text_color: orange
      checked: # set some btn colors to be different in checked state
        bg_color: 0x333333
        bg_grad_color: 0x333333
        text_color: orange
    dropdown:
      bg_color: 0x111111
      bg_opa: 85%
      border_color: 0x333333
      text_color: 0xFFFFFF
    buttonmatrix:
      bg_opa: TRANSP
      border_color: 0x333333
      border_width: 0
      text_color: 0xFFFFFF
      pad_all: 0
      items: # set all your btnmatrix buttons to use your custom defined styles and font
        bg_color: 0x111111
        bg_grad_color: 0x111111
        bg_grad_dir: VER
        bg_opa: COVER
        border_color: 0x333333
        border_width: 1
        text_color: 0xFFFFFF
        pressed:
          bg_color: 0x333333
          bg_grad_color: 0x333333
          text_color: orange
        checked:
          bg_color: 0x333333
          bg_grad_color: 0x333333
          text_color: orange
    switch:
      bg_color: 0xC0C0C0
      bg_grad_color: 0xb0b0b0
      bg_grad_dir: VER
      bg_opa: COVER
      checked:
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
        bg_opa: COVER
      knob:
        bg_color: 0xFFFFFF
        bg_grad_color: 0xC0C0C0
        bg_grad_dir: VER
        bg_opa: COVER
    slider:
      border_width: 1
      border_opa: 60%
      bg_color: 0x9c9c9c
      bg_opa: 30%
      indicator:
        bg_color: 0x333333
        bg_grad_color: 0x333333
        bg_opa: COVER
      knob:
        bg_color: 0x444444
        bg_grad_color: 0x444444
        bg_opa: COVER
        border_color: 0x444444
        border_width: 1
        text_color: 0xFFFFFF
  top_layer:
    layout:
      type: flex
      pad_row: 0
      pad_column: 0
      flex_flow: ROW
      flex_align_main: SPACE_BETWEEN # justify-content
      flex_align_cross: CENTER # align-items
      flex_align_track: START # align-content
    widgets:
      - label:
          text: "\uF1EB"
          id: lbl_hastatus
          align: CENTER
          hidden: true
          text_align: center
          text_color: 0xFFFFFF
          width: 10%
          height: 35
      - label:
          id: text_title
          text: 'Connecting...'
          width: 60%
          height: 35
      - slider:
          id: slider_brightness
          width: 30%
          pad_top: 10
          pad_right: 20
          min_value: 5
          max_value: 100
          value: !lambda return id(brightness);
      - keyboard:
          id: keyboard
          textarea: textarea_id
          hidden: true
          floating: true
          ignore_layout: true
          on_ready:
            then:
              - lvgl.widget.hide: keyboard
          on_cancel:
            then:
              - lvgl.widget.hide: keyboard
  pages:
    - id: main_page
      pad_top: 35
      widgets:
        - tabview:
            id: tabview_id
            position: top
            size: 12%
            styles: black_style
            text_font: montserrat_14
            tab_style:
              styles: black_style
              text_font: icons_24
              items:
                styles: black_style
                text_font: icons_24
            tabs:
              - name: "\U0000e0f0"
                layout:
                  type: flex
                  pad_row: 15
                  pad_column: 0
                  flex_flow: COLUMN_WRAP
                  flex_align_main: START # justify-content
                  flex_align_cross: CENTER # align-items
                  flex_align_track: START # align-content
                widgets:
                  - button:
                      id: btn_l_office_led0
                      checkable: true
                      height: 25%
                      width: 50%
                      widgets:
                        - label:
                            id: btn_l_office_led0_label
                            text_font: icons_24
                            text: "\U0000e0f0"
                            align: CENTER
                      on_click:
                        then:
                          - logger.log:
                              format: "Button pressed: %u"
                              args: [ x ]
                          - if:
                              condition:
                                lambda: "return x == true;"
                              ## todo: create script with x as input
                              then:
                                - homeassistant.service:
                                    service: light.turn_on
                                    data:
                                      entity_id: light.l_office_led0
                              else:
                                - homeassistant.service:
                                    service: light.turn_off
                                    data:
                                      entity_id: light.l_office_led0
                  - slider:
                      id: dimmer_l_office_led0
                      hidden: true
                      pad_all: 8
                      min_value: 0
                      max_value: 255
                      width: 50%
                      on_release:
                          - homeassistant.action:
                              action: light.turn_on
                              data:
                                entity_id: light.l_office_led0
                                brightness: !lambda return int(x);
                  - button:
                      id: btn_magichome_rgb
                      checkable: true
                      height: 25%
                      width: 50%
                      widgets:
                        - label:
                            id: btn_magichome_rgb_label
                            text_font: icons_24
                            text: "\U0000f7ed"
                            align: CENTER
                      on_click:
                        then:
                          - logger.log:
                              format: "Button pressed: %u"
                              args: [ x ]
                          - if:
                              condition:
                                lambda: "return x == true;"
                              ## todo: create script with x as input
                              then:
                                - homeassistant.service:
                                    service: light.turn_on
                                    data:
                                      entity_id: light.magichome_rgb
                              else:
                                - homeassistant.service:
                                    service: light.turn_off
                                    data:
                                      entity_id: light.magichome_rgb
                  - slider:
                      id: dimmer_magichome_rgb
                      hidden: true
                      pad_all: 8
                      min_value: 0
                      max_value: 255
                      width: 50%
                      on_release:
                          - homeassistant.action:
                              action: light.turn_on
                              data:
                                entity_id: light.magichome_rgb
                                brightness: !lambda return int(x);
                  - obj:
                      align: TOP_MID
                      border_width: 0
                      layout:
                        type: FLEX
                        flex_flow: ROW_WRAP
                        flex_align_main: CENTER
                        flex_align_track: CENTER
                        flex_align_cross: CENTER
                      width: 50%
                      widgets:
                        ## LED colors order is changed. it's: 0x<blue><green><red>
                        - led:
                            id: led_magichome_rgb_fuchsia
                            align: CENTER
                            color: 0xFF00FF
                            on_click:
                                - homeassistant.action:
                                    action: script.set_light_rgb
                                    data: {entity_id: 'light.magichome_rgb', red: '255', green: '0', blue: '255'}
                        - led:
                            id: led_magichome_rgb_yellow
                            align: CENTER
                            color: 0x00FFFF
                            on_click:
                                - homeassistant.action:
                                    action: script.set_light_rgb
                                    data: {entity_id: 'light.magichome_rgb', red: '255', green: '255', blue: '0'}
                        - led:
                            id: led_magichome_rgb_aqua
                            align: CENTER
                            color: 0xFFFF00
                            on_click:
                                - homeassistant.action:
                                    action: script.set_light_rgb
                                    data: {entity_id: 'light.magichome_rgb', red: '0', green: '255', blue: '255'}
                        - led:
                            id: led_magichome_rgb_red
                            align: CENTER
                            color: 0x0000FF
                            on_click:
                                - homeassistant.action:
                                    action: script.set_light_rgb
                                    data: {entity_id: 'light.magichome_rgb', red: '255', green: '0', blue: '0'}
                        - led:
                            id: led_magichome_rgb_green
                            align: CENTER
                            color: 0x00FF00
                            on_click:
                                - homeassistant.action:
                                    action: script.set_light_rgb
                                    data: {entity_id: 'light.magichome_rgb', red: '0', green: '255', blue: '0'}
                        - led:
                            id: led_magichome_rgb_blue
                            align: CENTER
                            color: 0xFF0000
                            on_click:
                                - homeassistant.action:
                                    action: script.set_light_rgb
                                    data: {entity_id: 'light.magichome_rgb', red: '0', green: '0', blue: '255'}
                        - led:
                            id: led_magichome_rgb_white
                            align: CENTER
                            color: 0xFFFFFF
                            on_click:
                                - homeassistant.action:
                                    action: script.set_light_rgb
                                    data: {entity_id: 'light.magichome_rgb', red: '255', green: '255', blue: '255'}

              - name: "\U0000f8b5"
                layout:
                  type: flex
                  pad_row: 0
                  pad_column: 0
                  flex_flow: COLUMN
                  flex_align_main: CENTER # justify-content
                  flex_align_cross: CENTER # align-items
                  flex_align_track: CENTER # align-content
                widgets:
                  - label:
                      id: lbl_climate_cur_temp
                      text_font: montserrat_26
                      text: " "
                      translate_x: -3
                      translate_y: 80
                      align_to:
                        id: arc_climate
                        align: CENTER
                  - arc:
                      id: arc_climate
                      value: 14
                      pad_top: 10
                      min_value: 16
                      max_value: 29
                      adjustable: true
                      on_change:
                        - if:
                            condition:
                              lambda: "return int(x) != id(c_target_temp).state;"
                            then:
                              - homeassistant.service:
                                  service: climate.set_temperature
                                  data:
                                    entity_id: climate.c_office_ac
                                    temperature: !lambda return x;
                  - label:
                      id: lbl_climate_target_temp
                      text_font: montserrat_20
                      text: " "
                      translate_x: -3
                      translate_y: -30
                  - obj:
                      align: TOP_MID
                      translate_y: -40
                      border_width: 0
                      pad_all: 0
                      layout:
                        type: FLEX
                        flex_flow: ROW
                        flex_align_cross: CENTER
                        pad_row: 0
                        pad_column: 120
                      width: SIZE_CONTENT
                      height: SIZE_CONTENT
                      widgets:
                        - button:
                            id: btn_climate_spinbox_down
                            translate_y: 10
                            on_click:
                              - lvgl.spinbox.decrement: spinbox_climate
                            widgets:
                              - label:
                                  text_font: montserrat_28
                                  text: "-"
                        - spinbox:
                            id: spinbox_climate
                            align: CENTER
                            text_align: CENTER
                            width: 90
                            range_from: 16
                            range_to: 29
                            step: 1
                            rollover: false
                            digits: 2
                            decimal_places: 0
                            hidden: true
                            on_change:
                              - if:
                                  condition:
                                    lambda: "return int(x) != id(c_target_temp).state;"
                                  then:
                                    - homeassistant.action:
                                        action: climate.set_temperature
                                        data:
                                          temperature: !lambda return x;
                                          entity_id: climate.c_office_ac
                        - button:
                            id: btn_climate_spinbox_up
                            translate_y: 10
                            on_click:
                              - lvgl.spinbox.increment: spinbox_climate
                            widgets:
                              - label:
                                  text_font: montserrat_28
                                  text: "+"
                  - dropdown:
                      id: dd_mode_climate
                      width: 90
                      align: TOP_MID
                      translate_y: -75
                      translate_x: -3
                      options:
                        - "off"
                        - "cool"
                        - "heat"
                        - "fan_only"
                        - "dry"
                      selected_index: 0
                      dropdown_list:
                        selected:
                          checked:
                            text_color: 0x0000FF
                      on_change:
                        - homeassistant.action:
                            action: climate.set_hvac_mode
                            data:
                              entity_id: climate.c_office_ac
                              hvac_mode: !lambda |-
                                if (int(x) == 1) { return (char*)"cool"; }
                                else if (int(x) == 2) { return (char*)"heat"; }
                                else if (int(x) == 3) { return (char*)"fan_only"; }
                                else if (int(x) == 4) { return (char*)"dry"; }
                                return (char*)"off";
                  - dropdown:
                      id: dd_fan_climate
                      width: 90
                      align: TOP_MID
                      translate_y: -60
                      translate_x: -3
                      options:
                        - "auto"
                        - "low"
                        - "medium"
                        - "high"
                      selected_index: 0
                      dropdown_list:
                        selected:
                          checked:
                            text_color: 0x0000FF
                      on_change:
                        - homeassistant.action:
                            action: climate.set_fan_mode
                            data:
                              entity_id: climate.c_office_ac
                              fan_mode: !lambda |-
                                if (int(x) == 1) { return (char*)"low"; }
                                else if (int(x) == 2) { return (char*)"medium"; }
                                else if (int(x) == 3) { return (char*)"high"; }
                                return (char*)"auto";
              - name: "\U0000e8b8"
                layout:
                  type: flex
                  pad_row: 4
                  pad_column: 0
                  flex_flow: COLUMN
                  flex_align_main: CENTER # justify-content
                  flex_align_cross: CENTER # align-items
                  flex_align_track: CENTER # align-content
                widgets:
                  - label:
                      text: "Textarea"
                  - textarea:
                      id: textarea_id
                      one_line: true
                      placeholder_text: "Enter text here"
                      on_focus:
                        then:
                          - lvgl.keyboard.update:
                              id: keyboard
                              textarea: textarea_id
                          - lvgl.widget.show: keyboard
                      on_defocus:
                        then:
                          - lvgl.widget.hide: keyboard
                      on_change:
                        then:
                          - logger.log:
                              format: "Textarea changed to: %s"
                              args: [ text.c_str() ]
                      on_ready:
                        then:
                          - logger.log:
                              format: "Textarea ready: %s"
                              args: [ text.c_str() ]
