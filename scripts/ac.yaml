turn_switch_by_climate:
  alias: 'turn_switch_by_climate'
  icon: 'mdi:switch'
  description: "Turn valves on/off depending of a climate's hvac_action."
  fields:
    climate_entity_id:
      description: 'Entity ID of climate to read hvac_action.'
      example: 'climate.t_livingroom'
    switch_entity_id:
      description: 'Entity ID of switch to turn on/off.'
      example: 'switch.ac_relay_livingroom'
  variables:
    # [state] = off ? [hvac_action] = off
    # [state] = heat, cool, heat_cool ? [hvac_action] = heating, cooling, off/idle (WThermostat/prog.termostat)
    # [state] = fan_only ? [hvac_action] = fan, idle
    # (daikin) [state] = fan_only, dry ? [hvac_action] = <none>
    hvac_mode: "{{ state_attr(climate_entity_id, 'hvac_action') if states(climate_entity_id) in ['heat', 'cool', 'heat_cool'] else states(climate_entity_id) }}"
    preferred_switch_state: "{{ 'off' if hvac_mode in ['idle', 'off', 'unavailable'] else 'on' }}"
  sequence:
#    - condition: template
#      value_template: "{{ hvac_mode in ['heating', 'cooling', 'fan_only', 'idle', 'off'] }}"
    - condition: template
      value_template: "{{ states(switch_entity_id) !=  preferred_switch_state }}"
    - condition: template
      value_template: "{{ ( as_timestamp(now()) - as_timestamp(state_attr('saver.saver', 'variables')[switch_entity_id + '_last_switch']|default('0')) | default(0, 'None') ) | int >= 20 }}"
    - service: system_log.write
      data:
        level: info
        message: "[{{ climate_entity_id }} / {{ switch_entity_id }}]: {{ states(switch_entity_id) }} -> {{ preferred_switch_state }} ({{ hvac_mode }})"
    - service_template: "switch.turn_{{ preferred_switch_state }}"
      data:
        entity_id: "{{ switch_entity_id }}"
    - service: saver.set_variable
      data:
        name: "{{ switch_entity_id }}_last_switch"
        value: "{{ now() }}"

